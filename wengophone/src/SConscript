env = WengoGetEnvironment()

#env.SConscript('WengoPhoneBuildIdSConscript')

WengoPhoneBuildId = {
	'buildId': WengoGetCurrentDateTime(),
	'version': '0.13',
	'revision': WengoGetSubversionRevision(),
	'sofphoneName': 'wengo',

	'copyright': 'Copyright (C) 2004-2006 Wengo  http://openwengo.com',

	'license': 'This program is free software; you can redistribute it and/or\\n'\
			'modify it under the terms of the GNU General Public License\\n'\
			'as published by the Free Software Foundation; either version 2\\n'\
			'of the License, or (at your option) any later version.',

	'description': 'WengoPhone is a VoIP application',
}

WengoSetVariable('WengoPhoneBuildId', WengoPhoneBuildId)


libs = [
	'wengoutil',
	'imwrapper',
	'sipwrapper',
	'wenbox',
	'tinyxml',
	'sound',
	'netlib',
	'qt4',
	'boost',
]
lib_path = []
include_path = ['.']
defines = {}
headers = []

env2 = WengoGetEnvironment()
if WengoGetConsoleArgument('newbuildid') :
  env2.Append( CPPDEFINES = {
   'DD_BUILDID'	     : str(WengoPhoneBuildId['buildId'])+'LL',
   'DD_VERSION'	     : WengoPhoneBuildId['version'],
   'DD_REVISION'	     : WengoPhoneBuildId['revision'],
   'DD_SOFTPHONE_NAME' : WengoPhoneBuildId['sofphoneName']
   }
   )
else :
  env2.Append( CPPDEFINES = {
   'DD_BUILDID'	     : '1234LL',
   'DD_VERSION'	     : '1.33',
   'DD_REVISION'     :	0,
   'DD_SOFTPHONE_NAME' : 'wengo'
   }
   )


buildid = env2.Object( source = 'WengoPhoneBuildId.cpp' )

#if WengoGetConsoleArgument('newbuildid') :
#   env2.AlwaysBuild(buildid)


env2.WengoStaticLibrary('buildid',  buildid)




sources = [
	'model/WengoPhone.cpp',
	'model/SipCallbacks.cpp',
	'model/config/Config.cpp',
	'model/config/ConfigManager.cpp',
	'model/config/LanguageList.cpp',
	'model/connect/Connect.cpp',
	'model/connect/ConnectHandler.cpp',
	'model/chat/ChatHandler.cpp',
	'model/wenbox/WenboxPlugin.cpp',
	'model/phonecall/SipAddress.cpp',
	'model/phonecall/PhoneCall.cpp',
	'model/phonecall/PhoneCallState.cpp',
	'model/phonecall/PhoneCallStateClosed.cpp',
	'model/phonecall/PhoneCallStateDefault.cpp',
	'model/phonecall/PhoneCallStateDialing.cpp',
	'model/phonecall/PhoneCallStateError.cpp',
	'model/phonecall/PhoneCallStateHold.cpp',
	'model/phonecall/PhoneCallStateIncoming.cpp',
	'model/phonecall/PhoneCallStateTalking.cpp',
	'model/phonecall/PhoneCallStateResumed.cpp',
	'model/phonecall/PhoneCallStateRinging.cpp',
	'model/phonecall/ConferenceCall.cpp',
	'model/phoneline/PhoneLine.cpp',
	'model/phoneline/PhoneLineStateDefault.cpp',
	'model/phoneline/PhoneLineStateOk.cpp',
	'model/phoneline/PhoneLineStateClosed.cpp',
	'model/phoneline/PhoneLineStateTimeout.cpp',
	'model/phoneline/PhoneLineStateServerError.cpp',
	'model/account/NetworkDiscovery.cpp',
	'model/account/wengo/WengoAccount.cpp',
	'model/account/wengo/WengoAccountRPCLayer.cpp',
	'model/account/wengo/WengoAccountXMLLayer.cpp',
	'model/account/wengo/WengoAccountParser.cpp',
#	'model/account/LocalNetworkAccount.cpp',
	'model/account/SipAccount.cpp',
	'model/presence/Presence.cpp',
	'model/presence/PresenceHandler.cpp',
	'model/presence/MyPresenceStateOnline.cpp',
	'model/presence/MyPresenceStateOffline.cpp',
	'model/presence/MyPresenceStateAway.cpp',
	'model/presence/MyPresenceStateDoNotDisturb.cpp',
	'model/presence/MyPresenceStateUserDefined.cpp',
	'model/contactlist/Contact.cpp',
	'model/contactlist/ContactList.cpp',
	'model/contactlist/ContactListParser.cpp',
	'model/contactlist/ContactGroup.cpp',
	'model/contactlist/ContactGroupParser.cpp',
	'model/contactlist/ContactParser.cpp',
	'model/contactlist/ContactListXMLLayer.cpp',
	'model/contactlist/ContactListRPCLayer.cpp',
	'model/contactlist/IMContactListHandler.cpp',
	'model/sms/Sms.cpp',

	'control/wenbox/CWenboxPlugin.cpp',
	'control/CWengoPhone.cpp',
	'control/connect/CConnectHandler.cpp',
	'control/chat/CChatHandler.cpp',
	'control/presence/CPresenceHandler.cpp',
	'control/phoneline/CPhoneLine.cpp',
	'control/phonecall/CPhoneCall.cpp',
	'control/contactlist/CContact.cpp',
	'control/contactlist/CContactList.cpp',
	'control/contactlist/CContactGroup.cpp',
	'control/sms/CSms.cpp',

	'presentation/PFactory.cpp'
]

env.WengoCopyToBuildDir('../sounds', 'sounds')
env.WengoAddIncludePath(include_path)
env.WengoUseLibraries(libs)
env.WengoStaticLibrary('wengophone', sources)
