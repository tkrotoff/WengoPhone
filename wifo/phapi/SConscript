import os

amr_defines = { }
speex_defines = {}
defines = { }

if WengoGetConsoleArgument('speexwb-replaces-amrwb') and \
     WengoGetConsoleArgument('speexwb-replaces-amrnb') and WengoGetConsoleArgument('speexwb-replaces-g726wb'):
   print "******* Please Select ONLY ONE of: [ speexwb-replaces-amrwb  speexwb-replaces-amrnb or speexwb-replaces-g726wb]"
   Exit(1)

   

if WengoGetConsoleArgument('speexwb-replaces-amrwb'):
    amr_defines['PH_SPEEXWB_REPLACES_AMRWB'] = 1
    speex_defines['PH_SPEEXWB_REPLACES_AMRWB'] = 1
    defines['PH_SPEEXWB_REPLACES_AMRWB'] = 1

if WengoGetConsoleArgument('speexwb-replaces-amrnb'):
    amr_defines['PH_SPEEXWB_REPLACES_AMRNB'] = 1    
    speex_defines['PH_SPEEXWB_REPLACES_AMRNB'] = 1    
    defines['PH_SPEEXWB_REPLACES_AMRNB'] = 1    


if WengoGetConsoleArgument('speexwb-replaces-g726wb'):
    amr_defines['PH_SPEEXWB_REPLACES_G726WB'] = 1    
    speex_defines['PH_SPEEXWB_REPLACES_G726WB'] = 1    
    defines['PH_SPEEXWB_REPLACES_G726WB'] = 1    




amr_env = WengoGetEnvironment()
amr_libs = [
	'amrwb',
	'amrnb',
]


amr_env.WengoAddDefines(amr_defines)
amr_env.WengoUseLibraries(amr_libs)
amr_env.WengoAddCCFlags(WengoGetVariable('phapi_optimization_flags'))
amr = amr_env.WengoPlugin('phamrplugin', ['phcodec-amr-wrapper.c'])



speex_env = WengoGetEnvironment()
speex_libs = [
	'speex',
]

speex_env.WengoUseLibraries(speex_libs)
speex_env.WengoAddCCFlags(WengoGetVariable('phapi_optimization_flags'))



speex_env.WengoAddDefines(speex_defines)

speex_env.Append(LIBS = speex_libs)
speex = speex_env.WengoPlugin('phspeexplugin', ['phcodec-speex.c'])

if WengoGetConsoleArgument('enable-ipp'):
    IPPROOT = False
    IPPSAMPLEROOT = False
 
  
    if os.environ.has_key('IPPROOT'):
        IPPROOT = os.environ['IPPROOT']
 
    if os.environ.has_key('IPPSAMPLEROOT'):
        IPPSAMPLEROOT = os.environ['IPPSAMPLEROOT']

    if IPPROOT and IPPSAMPLEROOT:

        print "building ipp plugin"
        ipp_env = WengoGetEnvironment()
        ipp_libs = [
            'ippsc', 'ipps',  'ippsr',  'ippcore',  
         #   'guide', 
            'usc'	
            ]
        
        ipp_includes = [
            IPPROOT + "/include", IPPSAMPLEROOT + "/codec/include"
            ]
            
    
        if WengoOSWindows():
            ipp_libpath = [

                IPPROOT + "/lib", IPPROOT + "/stublib",
                IPPSAMPLEROOT + "/bin/ia32/lib"
            ]
        
            ipp_env.Append( LINKFLAGS = '/NODEFAULTLIB:MSVCRT')
        else:         
          ipp_libpath = [

            IPPROOT + "/sharedlib", IPPROOT + "/sharedlib/linux32",
            IPPSAMPLEROOT + "/bin/ia32/lib"
            ]
                    

        ipp_env.Append( LIBS = ipp_libs,  LIBPATH = ipp_libpath) 
        ipp_env.WengoAddIncludePath(ipp_includes)
        ipp = ipp_env.WengoPlugin('phippplugin', ['phcodec-intel-ipp.c'])
        Alias('phippp', [ipp])

env = WengoGetEnvironment()

link_flags = []

libs = [
	'eXosip',
	'ortp',
	'osip',
	'ilbc',
	'stun',
	'gsm',
	'global',
	'wtimer',
]


lib_path = []
include_path = ['.']
defines = {
	'USE_PCM' : 1,
	'NEED_ECMUX' : 1,
	'MINIMIZE_COPYING' : 1,
	'SCHEDULING_MODE' : 0,
	'BLOCKING_MODE' : 0,
	'DO_ECHO_CAN' : 1,
	'ENABLE_AMR_WB' : 1,
	'ENABLE_AMR' : 1,
	'MY_DLLEXPORTS' : 1,
	'USE_WAVEIN_CBK' : 1,
	'PSEUDO_AEC' : 0,
	'NO_ECHO__SUPPRESSOR' : 1,
	'ENABLE_ILBC' : 1,
	'OSIP_MT' : 1,
	'ENABLE_TRACE' : 0,
	'VIDEO_IOTHREAD_TIMERS' : 1,
	'USE_SPXEC' : 1,
}
headers = []
sources = [
	'phcodec.c',
	'phmbuf.c',
	'tonegen.c',
#	'phx.c',
	'phmedia-audio-null.c',
	'phapi.c',
	'phaudiodriver.c',
	'phmedia.c',
	'phmedia-audio.c',
	'aec2.cpp',
	'fidlib.c',
	'spxec.c',
	'spxecfft.c'
]

if WengoGetConsoleArgument('enable_netlib'):
    defines['PH_USE_NETLIB'] = 1
    

if WengoOSLinux() or WengoOSBSD():
	sources += ['phmedia-oss.c']

	if WengoGetConsoleArgument('enable-phapi-audio-arts'):
		defines['ENABLE_ARTS'] = 1
		sources += ['phmedia-audio-arts.c']
		env.ParseConfig('artsc-config --cflags --libs')

	if WengoGetConsoleArgument('enable-phapi-audio-esd'):
		defines['ENABLE_ESD'] =  1
		sources += ['phmedia-audio-esd.c']
		env.ParseConfig('esd-config --cflags --libs')

if WengoGetConsoleArgument('enable-phapi-embed'):
	defines['SCHEDULING_MODE'] =  1

shphapi =  WengoGetConsoleArgument('enable-shared-phapi')

if shphapi:
    defines['BUILD_PHAPI_DLL'] = 1    



if WengoGetConsoleArgument('enable-qos-debug'):
	defines['PHAPI_QOS_DEBUG'] =  1

if WengoOSLinux():
	libs += ['pthread', 'rt']

if WengoGetConsoleArgument('enable-video'):
	libs += [
		'avcodec',
		'webcam',
		'pixertool',
	]
	defines['PHAPI_VIDEO_SUPPORT'] = 1

	sources += [
		'phcodec-h263.c',
		'phcodec-h264.c',
		'phcodec-mpeg4.c',
		'phmedia-video.c',
		'phmedia-video-control.c',
		'phmedia-video-bwcontrol.c',
		'phcodec-avcodec-wrapper.c',
	]

if WengoGetConsoleArgument('enable-http-tunnel'):
    libs += [
        'wengocurl',
        'httptunnel'
        ]

    if WengoGetConsoleArgument('enable-ssl'):
        libs += ['openssl']
        

	defines['USE_HTTP_TUNNEL'] = 1

if WengoGetConsoleArgument('enable-samplerate'):
	libs += ['samplerate']
	defines['PH_USE_RESAMPLE'] = 1

if WengoGetConsoleArgument('enable-phapi-video-hack'):
	defines['PHAPI_VIDEO_LOCAL_HACK'] = 1

if WengoGetConsoleArgument('enable-netlib'):
	libs += ['netlib']

if True:
	libs += ['portaudio']
	defines['ENABLE_PORTAUDIO'] = 1
	sources += ['phmedia-portaudio.c']

if WengoOSLinux() or WengoOSBSD():
	env.ParseConfig('pkg-config --cflags --libs gthread-2.0')

if WengoOSLinux():
	if not WengoGetConsoleArgument('disable-alsa'):
		defines['ENABLE_ALSA'] = 1
		libs += ['asound']
		sources += ['phmedia-alsa.c']

if WengoOSWindows():
	defines['T_MSVC'] = 1
	defines['USE_WIN_TIMERS'] = 1

	sources += [
		'phmedia-winmm.c',
		'msdirent.c'
	]

	libs += [
		'winmm',
		'ws2_32',
		'user32',
		'shell32',
		'advapi32',
		'wininet',
		'iphlpapi',
        'strmiids',
        'comsupp',
        'ole32',
	]

if WengoOSMacOSX():
	sources += ['phmedia-coreaudio.c']



env.WengoAddIncludePath(include_path)
env.WengoAddDefines(defines)
env.WengoAddLinkFlags(link_flags)
env.WengoUseLibraries(libs)
env.WengoAddDoxyfile()

if shphapi:
    phapi = env.WengoSharedLibrary('phapi', sources)
else:
    phapi = env.WengoStaticLibrary('phapi', sources)

#Depends(phapi, [amr[0], speex[0]])
Depends(phapi, [amr, speex])

phapi_py_env = WengoGetEnvironment()
phapi_py_env.WengoAddIncludePath(["C:\Program Files\Python24\include"])
phapi_py_env.WengoAddLibPath(["C:\Program Files\Python24\libs"])
phapi_py_env.WengoUseLibraries(["phapi", "python24"])
phapi_py_env.WengoSharedLibrary("pyphapi", "pyphapi.c")
