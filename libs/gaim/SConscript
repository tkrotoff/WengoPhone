import os, ConfigParser, shutil

env = WengoGetEnvironment()

defines = {}

sources = []

libs = [
	'gmodule-2.0',
	'glib-2.0',
	'gthread-2.0',
]

lib_path = []

include_path = [
	'src/src',
	'include',
]

libs_file = []


if WengoCCMinGW():
	#get external dependencies and uncompress include files

	include_path += [
		'include/gaim/win32',
		]

	if WengoGetConsoleArgument('prepare-for-mingw'):
		if not os.path.exists(os.path.join(WengoGetSourcePath(), 'mingw',
										   'mingw.properties'))	and\
		not os.path.exists(os.path.join(WengoGetSourcePath(), './mingw')):
				os.mkdir(os.path.join(WengoGetSourcePath(), 'mingw'))
		info_file = open(os.path.join(WengoGetSourcePath(), 'mingw', 'mingw.properties'), 'w')
		info_file.write('[include_paths]\n')
		external_packages_list = [
			('ftp://ftp.mozilla.org/pub/mozilla.org/security/nss/releases/NSS_3_9_RTM/WIN954.0_OPT.OBJ/nss-3.9.zip',
			 '.+\.h'),
			('ftp://ftp.mozilla.org/pub/mozilla.org/nspr/releases/v4.4.1/WIN954.0_OPT.OBJ/nspr-4.4.1.zip',
			 '.+\.h'),
			#TODO: tarball seems to be corrupted, needs to notice tarball creator before commenting out the following line
			('http://wengofiles.wengo.fr/gtk-dev-2.6.10-rev-a.tar.gz', 'gtk_2_0/include'),
			]
		i = 0
		for (external_package, pattern_to_extract) in external_packages_list:
			for tmp_include_path in env.WengoGetExternalPackage(external_package,
															pattern_to_extract):
				info_file.write(str(i) + '=' + tmp_include_path + '\n')
				i += 1
		info_file.close()

		shutil.copyfile(os.path.join(WengoGetSourcePath(), 'src/config.h.mingw'), os.path.join(WengoGetSourcePath(), 'src/config.h'))


if os.path.exists(os.path.join(WengoGetSourcePath(), 'mingw/mingw.properties')):
	config = ConfigParser.ConfigParser()
	config.readfp(open(os.path.join(WengoGetSourcePath(), 'mingw/mingw.properties')))
	for (index, tmp_include_path) in config.items('include_paths'):
		include_path.append(tmp_include_path)

if WengoOSWindows() and WengoCCMSVC():
	lib_path += [
		'binary-lib/msvc',
	]

	libs_file += [
		'binary-lib/msvc/gaim.lib',
		'binary-lib/msvc/gaim.dll',
		'binary-lib/msvc/iconv.dll',
		'binary-lib/msvc/intl.dll',
		'binary-lib/msvc/nspr4.dll',
		'binary-lib/msvc/nss3.dll',
		'binary-lib/msvc/nssckbi.dll',
		'binary-lib/msvc/plc4.dll',
		'binary-lib/msvc/plds4.dll',
		'binary-lib/msvc/softokn3.dll',
		'binary-lib/msvc/ssl3.dll',
		'binary-lib/msvc/zlib1.dll',
		'binary-lib/msvc/idletrack.dll',
		'binary-lib/msvc/libatk-1.0-0.dll',
		'binary-lib/msvc/libgdk_pixbuf-2.0-0.dll',
		'binary-lib/msvc/libgdk-win32-2.0-0.dll',
		'binary-lib/msvc/libgobject-2.0-0.dll',
		'binary-lib/msvc/libgtk-win32-2.0-0.dll',
		'binary-lib/msvc/libpango-1.0-0.dll',
		'binary-lib/msvc/libpangowin32-1.0-0.dll',
	]

	env.WengoCopyToBuildDir('binary-lib/msvc/')
	env.WengoAddLibPath(lib_path)
	env.WengoAddIncludePath(include_path)
	env.WengoUseLibraries(libs)
	env.WengoDeclareLibrary('gaim', libs_file)

if WengoOSMacOSX():
	include_path += [
		'/sw/include', # for gnutls
	]

	lib_path += [
		'/sw/lib', # for gnutls. FIXME: works only with fink
	]

	defines['MSG_NOSIGNAL'] = 0

if WengoCCGCC() or WengoCCMinGW():

	sources += [
		'src/src/account.c',
		'src/src/accountopt.c',
		'src/src/blist.c',
		'src/src/buddyicon.c',
		'src/src/cipher.c',
		'src/src/cmds.c',
		'src/src/connection.c',
		'src/src/conversation.c',
		'src/src/core.c',
		'src/src/debug.c',
		'src/src/desktopitem.c',
		'src/src/dnssrv.c',
		'src/src/eventloop.c',
		'src/src/ft.c',
		'src/src/gaim_buffer.c',
		'src/src/getopt.c',
		'src/src/getopt1.c',
		'src/src/idle.c',
		'src/src/imgstore.c',
		'src/src/log.c',
		'src/src/media.c',
		'src/src/mime.c',
		'src/src/network.c',
		'src/src/notify.c',
		'src/src/ntlm.c',
		'src/src/plugin.c',
		'src/src/pluginpref.c',
		'src/src/pounce.c',
		'src/src/prefs.c',
		'src/src/privacy.c',
		'src/src/proxy.c',
		'src/src/prpl.c',
		'src/src/request.c',
		'src/src/roomlist.c',
		'src/src/savedstatuses.c',
		'src/src/server.c',
		'src/src/signals.c',
		'src/src/sound.c',
		'src/src/sslconn.c',
		'src/src/status.c',
		'src/src/stringref.c',
		'src/src/stun.c',
		'src/src/upnp.c',
		'src/src/util.c',
		'src/src/value.c',
		'src/src/whiteboard.c',
		'src/src/xmlnode.c',
		'src/plugins/ssl/ssl.c',
	#	'src/plugins/tcl/tcl.c',
	#	'src/plugins/tcl/tcl_cmds.c',
	#	'src/plugins/tcl/tcl_signals.c',
	#	'src/plugins/tcl/tcl_glib.c',
	#	'src/src/protocols/irc/cmds.c',
	#	'src/src/protocols/irc/dcc_send.c',
	#	'src/src/protocols/irc/irc.c',
	#	'src/src/protocols/irc/msgs.c',
	#	'src/src/protocols/irc/parse.c',
		'src/src/protocols/jabber/auth.c',
		'src/src/protocols/jabber/buddy.c',
		'src/src/protocols/jabber/chat.c',
		'src/src/protocols/jabber/disco.c',
		'src/src/protocols/jabber/iq.c',
		'src/src/protocols/jabber/jabber.c',
		'src/src/protocols/jabber/jutil.c',
		'src/src/protocols/jabber/message.c',
		'src/src/protocols/jabber/oob.c',
		'src/src/protocols/jabber/parser.c',
		'src/src/protocols/jabber/presence.c',
		'src/src/protocols/jabber/roster.c',
		'src/src/protocols/jabber/si.c',
		'src/src/protocols/jabber/xdata.c',
		'src/src/protocols/msn/cmdproc.c',
		'src/src/protocols/msn/command.c',
		'src/src/protocols/msn/dialog.c',
		'src/src/protocols/msn/directconn.c',
		'src/src/protocols/msn/error.c',
		'src/src/protocols/msn/group.c',
		'src/src/protocols/msn/history.c',
		'src/src/protocols/msn/httpconn.c',
		'src/src/protocols/msn/msg.c',
		'src/src/protocols/msn/msn.c',
		'src/src/protocols/msn/nexus.c',
		'src/src/protocols/msn/notification.c',
		'src/src/protocols/msn/object.c',
		'src/src/protocols/msn/page.c',
		'src/src/protocols/msn/servconn.c',
		'src/src/protocols/msn/session.c',
		'src/src/protocols/msn/slp.c',
		'src/src/protocols/msn/slpcall.c',
		'src/src/protocols/msn/slplink.c',
		'src/src/protocols/msn/slpmsg.c',
		'src/src/protocols/msn/slpsession.c',
		'src/src/protocols/msn/state.c',
		'src/src/protocols/msn/switchboard.c',
		'src/src/protocols/msn/sync.c',
		'src/src/protocols/msn/table.c',
		'src/src/protocols/msn/transaction.c',
		'src/src/protocols/msn/user.c',
		'src/src/protocols/msn/userlist.c',
		'src/src/protocols/msn/utils.c',
	#	'src/src/protocols/napster/napster.c',
	#	'src/src/protocols/novell/nmconference.c',
	#	'src/src/protocols/novell/nmconn.c',
	#	'src/src/protocols/novell/nmcontact.c',
	#	'src/src/protocols/novell/nmevent.c',
	#	'src/src/protocols/novell/nmfield.c',
	#	'src/src/protocols/novell/nmmessage.c',
	#	'src/src/protocols/novell/nmrequest.c',
	#	'src/src/protocols/novell/nmrtf.c',
	#	'src/src/protocols/novell/nmuser.c',
	#	'src/src/protocols/novell/nmuserrecord.c',
	#	'src/src/protocols/novell/novell.c',
		'src/src/protocols/oscar/bstream.c',
		'src/src/protocols/oscar/conn.c',
		'src/src/protocols/oscar/family_admin.c',
		'src/src/protocols/oscar/family_advert.c',
		'src/src/protocols/oscar/family_alert.c',
		'src/src/protocols/oscar/family_auth.c',
		'src/src/protocols/oscar/family_bart.c',
		'src/src/protocols/oscar/family_bos.c',
		'src/src/protocols/oscar/family_buddy.c',
		'src/src/protocols/oscar/family_chat.c',
		'src/src/protocols/oscar/family_chatnav.c',
		'src/src/protocols/oscar/family_feedbag.c',
		'src/src/protocols/oscar/family_icbm.c',
		'src/src/protocols/oscar/family_icq.c',
		'src/src/protocols/oscar/family_invite.c',
		'src/src/protocols/oscar/family_locate.c',
		'src/src/protocols/oscar/family_odir.c',
		'src/src/protocols/oscar/family_oservice.c',
		'src/src/protocols/oscar/family_popup.c',
		'src/src/protocols/oscar/family_stats.c',
		'src/src/protocols/oscar/family_translate.c',
		'src/src/protocols/oscar/family_userlookup.c',
		'src/src/protocols/oscar/misc.c',
		'src/src/protocols/oscar/msgcookie.c',
		'src/src/protocols/oscar/oscar.c',
		'src/src/protocols/oscar/peer.c',
		'src/src/protocols/oscar/rxhandlers.c',
		'src/src/protocols/oscar/rxqueue.c',
		'src/src/protocols/oscar/session.c',
		'src/src/protocols/oscar/snac.c',
		'src/src/protocols/oscar/tlv.c',
		'src/src/protocols/oscar/txqueue.c',
		'src/src/protocols/oscar/util.c',
		'src/src/protocols/yahoo/util.c',
		'src/src/protocols/yahoo/yahoo.c',
		'src/src/protocols/yahoo/yahoo_auth.c',
		'src/src/protocols/yahoo/yahoo_crypt.c',
		'src/src/protocols/yahoo/yahoo_doodle.c',
		'src/src/protocols/yahoo/yahoo_filexfer.c',
		'src/src/protocols/yahoo/yahoo_friend.c',
		'src/src/protocols/yahoo/yahoo_packet.c',
		'src/src/protocols/yahoo/yahoo_picture.c',
		'src/src/protocols/yahoo/yahoo_profile.c',
		'src/src/protocols/yahoo/yahoochat.c',
		'src/src/protocols/yahoo/ycht.c',
	]


	include_path += [
		'src',
		'src/src',
		'src/src/protocols/oscar/',
	]

	lib_path += [
		'binary-lib/msvc',
	]

	defines['HAVE_CONFIG_H'] = 1
	defines['HAVE_GLIB'] = 1
	defines['GAIM_STATIC_PRPL'] = 1
	defines['HAVE_SSL'] = 1

	if WengoCCMinGW():
		libs_file += [
			'binary-lib/msvc/iconv.dll',
			'binary-lib/msvc/intl.dll',
			'binary-lib/msvc/nspr4.dll',
			'binary-lib/msvc/nss3.dll',
			'binary-lib/msvc/nssckbi.dll',
			'binary-lib/msvc/plc4.dll',
			'binary-lib/msvc/plds4.dll',
			'binary-lib/msvc/softokn3.dll',
			'binary-lib/msvc/ssl3.dll',
			'binary-lib/msvc/zlib1.dll',
		]

		for lib_file in libs_file:
			env.WengoCopyToBuildDir(lib_file, 'binary-lib/msvc/')
		libs += [
			'nspr4',
			'nss3',
			'intl',
			'nssckbi',
			'plc4',
			'plds4',
			'softokn3',
			'ssl3',
			'zlib1',
		]


		include_path += [
			'src/src/protocols/jabber/win32',
			'src/src/win32',
			'src/src/protocols/jabber/win32',
		]

		sources += [
			'src/plugins/ssl/ssl-nss.c',
			'src/src/win32/libc_interface.c',
			'src/src/win32/win32dep.c',
			'src/src/win32/untar.c',
			'src/src/protocols/jabber/win32/posix.uname.c',
		]

	else:
		defines['HAVE_GNUTLS'] = 1
		sources += [
			'src/src/prefix.c',
			'src/plugins/ssl/ssl-gnutls.c',
		]

		libs += [
			'gnutls',
		]

        if WengoOSLinux() or WengoOSMacOSX():
            libs += [ 'resolv' ]

	env.ParseConfig('pkg-config --cflags --libs gthread-2.0')
	env.ParseConfig('pkg-config --cflags --libs gmodule-2.0')

	env.WengoAddDefines(defines)
	env.WengoAddLibPath(lib_path)
	env.WengoAddIncludePath(include_path)
	env.WengoUseLibraries(libs)

	env.WengoStaticLibrary('gaim', sources)
