env = WengoGetEnvironment()

libs = []
lib_path = []
include_path = []
defines = {}

if WengoOSWindows():
	include_path += [
		'include/openssl',
		'include',
	]

	if WengoCCMSVC():
		libs += [
			'libeay32',
			'ssleay32',
		]
		lib_path += ['binary-lib/msvc']

	elif WengoCCMinGW():
		libs += [
			'ssl',
			'crypto',
		]
		lib_path += ['binary-lib/mingw']

else:
	libs += [
		'ssl',
		'crypto',
	]

env.WengoAddIncludePath(include_path)
env.WengoAddLibPath(lib_path)
env.WengoAddDefines(defines)
env.WengoUseLibraries(libs)

if WengoOSWindows():
	if WengoCCMSVC():
		env.WengoDeclareLibrary('openssl', ['binary-lib/msvc/libeay32.lib', 'binary-lib/msvc/ssleay32.lib'])
		print env['LIBS']
		#env['LIBS'].remove('openssl')
	elif WengoCCMinGW():
		env.WengoDeclareLibrary('openssl', ['binary-lib/mingw/libcrypto.a', 'binary-lib/mingw/libssl.a'])
		print env['LIBS']
		#env['LIBS'].remove('openssl')
else:
	env.WengoDeclareSystemLibrary('openssl')
