
#ifndef __COMMAND_IMPL_H__
#define __COMMAND_IMPL_H__

#include "nsISupports.h"
#include <nsIServiceManager.h>

#include <plevent.h>
#include <nsIEventQueue.h>

// autogenerated by the idl
#include "ICommand.h"

// {B0A32E01-772E-47b0-BF6A-9622515CD60F}
// uid by Max
#define COMMAND_CID						\
  { 0xb0a32e01, 0x772e, 0x47b0,					\
      { 0xbf, 0x6a, 0x96, 0x22, 0x51, 0x5c, 0xd6, 0xf } }

#define COMMAND_CONTRACTID	"@openwengo.com/coipcommand;1"
#define COMMAND_CLASSNAME	"COIP Command Component"

// include the file from the extern library
// coming from XPCOM
#include "Command.h"
// coming from IDL
#include "IListener.h"
#include "IConfigurator.h"

/* Header file */
class CCommand: public ICommand, ICommandObserver
{
public:
  NS_DECL_ISUPPORTS
  NS_DECL_ICOMMAND

  CCommand();

  // implement virutal methods
  void DebugMessage(const std::string & message);

  void SendFeedback(unsigned sessionID,
		    const std::string & state,
		    const std::string & param);

  char *ConfGetChar(const std::string & prefID);
  void ConfSetChar(const std::string & prefID, const std::string & value);

  EnumProtocol::Protocol GetProtocol(PRInt16 aProtocol);

private:
  ~CCommand();

  bool Proxyfy();

  IListener *_listener;
  IConfigurator *_configurator;

  // Command, from the C++ XPCOM
  Command *_command;

  // Proxy
  nsCOMPtr<IListener> _listenerProxy;

protected:
};

#endif
